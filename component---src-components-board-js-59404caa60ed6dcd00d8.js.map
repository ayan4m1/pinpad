{"version":3,"file":"component---src-components-board-js-59404caa60ed6dcd00d8.js","mappings":"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","sources":["webpack://pinpad/./src/types/pin.js","webpack://pinpad/./src/utils/units.js","webpack://pinpad/./src/components/Pin.js","webpack://pinpad/./src/components/PinFunction.js","webpack://pinpad/./src/components/PinFunctions.js","webpack://pinpad/./src/utils/colors.js","webpack://pinpad/./src/components/PinRow.js","webpack://pinpad/./src/components/Board.js","webpack://pinpad/./src/utils/translate.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const PositionType = PropTypes.shape({\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired\n});\n\nexport const SizeType = PropTypes.shape({\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired\n});\n\nexport const FunctionsType = PropTypes.arrayOf(PropTypes.string.isRequired);\n","import { useMemo } from 'react';\n\nexport const pxToMm = (\n  pixels,\n  ppi = typeof window !== 'undefined' ? window.devicePixelRatio * 96 : 96\n) => pixels * (25.4 / ppi);\n\nexport const mmToPx = (\n  mm,\n  ppi = typeof window !== 'undefined' ? window.devicePixelRatio * 96 : 96\n) => mm * (ppi / 25.4);\n\nexport const useTextWidth = (text) =>\n  useMemo(() => {\n    if (typeof document === 'undefined') {\n      return 0;\n    }\n\n    const fragment = document.createDocumentFragment();\n    const canvas = document.createElement('canvas');\n\n    fragment.appendChild(canvas);\n    const context = canvas.getContext('2d');\n\n    return context.measureText(text).width;\n  }, [text]);\n","import PropTypes from 'prop-types';\n\nimport { SizeType } from 'types/pin';\nimport { mmToPx } from 'utils/units';\n\nexport default function Pin({ size }) {\n  const { height, width } = size;\n\n  return (\n    <rect\n      x={0}\n      y={0}\n      height={mmToPx(height)}\n      width={mmToPx(width)}\n      fill=\"#FFD700\"\n      stroke=\"#262323\"\n      strokeWidth={2}\n    />\n  );\n}\n\nPin.propTypes = {\n  index: PropTypes.number.isRequired,\n  size: SizeType.isRequired\n};\n","import PropTypes from 'prop-types';\n\nexport default function PinFunction({\n  x,\n  y,\n  width,\n  height,\n  color,\n  textColor,\n  name\n}) {\n  return (\n    <g transform={`translate(${x} ${y})`}>\n      <rect x={0} y={0} width={width} height={height} rx={4} fill={color} />\n      <text\n        x={width / 2}\n        y={10}\n        font=\"DejaVu Sans Mono\"\n        fontSize=\"10px\"\n        fill={textColor}\n        style={{ textAnchor: 'middle' }}\n      >\n        {name}\n      </text>\n    </g>\n  );\n}\n\nPinFunction.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  textColor: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired\n};\n","import PropTypes from 'prop-types';\n\nimport { FunctionsType, PositionType } from 'types/pin';\nimport { getColorForFunction } from 'utils/colors';\nimport { useTextWidth } from 'utils/units';\nimport PinFunction from './PinFunction';\n\nexport default function PinFunctions({\n  functions,\n  height,\n  labelPosition,\n  name\n}) {\n  const omitName =\n    functions.length === 1 && functions[0].toLowerCase() === name.toLowerCase();\n  const nameWidth = useTextWidth(name) + 4;\n\n  let nameX = 0,\n    offset = 0;\n\n  switch (labelPosition) {\n    case 'left':\n      nameX = -nameWidth - 12;\n      break;\n    case 'right':\n      nameX = nameWidth / 2 + 6;\n      break;\n  }\n\n  if (!omitName) {\n    offset += nameWidth + 12;\n  } else {\n    offset += 12;\n  }\n\n  return (\n    <g transform={`translate(0 0)`}>\n      {!omitName && (\n        <PinFunction\n          x={nameX}\n          y={0}\n          width={nameWidth}\n          height={height}\n          color=\"#dbebf9\"\n          textColor=\"black\"\n          name={name}\n        />\n      )}\n      {functions.map((fn, i) => {\n        let x = 0,\n          y = 0,\n          width = 40;\n\n        const functionName = fn.toUpperCase();\n        width = useTextWidth(functionName) + 4;\n\n        const offsetIndex = omitName ? i : i + 1;\n        switch (labelPosition) {\n          case 'left':\n            offset += width;\n            x -= offset;\n            break;\n          case 'right':\n            offset += width / 2;\n            x += offset;\n            break;\n          case 'top':\n            y -= height * offsetIndex;\n            break;\n          case 'bottom':\n            y += height * offsetIndex;\n            break;\n        }\n\n        const color = getColorForFunction(functionName);\n        let textColor = '#000000';\n\n        if (color === '#000000') {\n          textColor = '#ffffff';\n        }\n\n        return (\n          <PinFunction\n            key={i}\n            x={x}\n            y={y}\n            height={height}\n            width={width}\n            color={color}\n            textColor={textColor}\n            name={functionName}\n          />\n        );\n      })}\n    </g>\n  );\n}\n\nPinFunctions.propTypes = {\n  functions: FunctionsType.isRequired,\n  height: PropTypes.number.isRequired,\n  labelPosition: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  position: PositionType.isRequired\n};\n","export const getColorForFunction = (fn) => {\n  switch (fn) {\n    case '5V':\n    case '3.3V':\n    case '3V':\n    case 'VCC':\n    case 'VIN':\n      return '#f90302';\n    case 'GPIO':\n      return '#e2eaf4';\n    case 'TX':\n    case 'RX':\n      return '#fff2c1';\n    case 'MOSI':\n    case 'MISO':\n    case 'SCLK':\n    case 'CS':\n      return '#99f442';\n    case 'WAKE':\n      return '#ec75d9';\n    case 'RST':\n    case 'RESET':\n    case 'FLASH':\n      return '#fcbd00';\n    case 'ADC':\n      return '#00b4ee';\n    case 'SDA':\n    case 'SCL':\n      return '#79e0d8';\n    case 'GND':\n      return '#000000';\n    default:\n      return '#ffffff';\n  }\n};\n","import PropTypes from 'prop-types';\n\nimport Pin from 'components/Pin';\nimport PinFunctions from 'components/PinFunctions';\nimport { PositionType, SizeType } from 'types/pin';\nimport { mmToPx, pxToMm } from 'utils/units';\n\nexport default function PinRow({\n  orientation,\n  labelPosition,\n  pins,\n  pinSize,\n  pitch,\n  position\n}) {\n  return (\n    <g transform={`translate(${mmToPx(position.x)} ${mmToPx(position.y)})`}>\n      {pins.map((pin) => {\n        const pinPos = {\n          x: orientation === 'horizontal' ? pin.position * pitch : 0,\n          y: orientation === 'vertical' ? pin.position * pitch : 0\n        };\n        const functionPos = {\n          x: pinPos.x,\n          y: pinPos.y\n        };\n        const linePos = {\n          x1: pinSize.width,\n          y1: pinSize.height / 2,\n          x2: pinSize.width,\n          y2: pinSize.height / 2\n        };\n\n        switch (labelPosition) {\n          case 'left':\n            functionPos.x -= pxToMm(22);\n            linePos.x1 *= -1;\n            linePos.x2 = 0;\n            break;\n          case 'right':\n            functionPos.x += pxToMm(22);\n            linePos.x2 += pinSize.width;\n            break;\n          case 'top':\n            functionPos.y -= pxToMm(12);\n            linePos.y1 *= -1;\n            linePos.y2 = 0;\n            break;\n          case 'bottom':\n            functionPos.y += pxToMm(12);\n            linePos.y2 += pinSize.height;\n            break;\n        }\n\n        return (\n          <g\n            key={pin.id}\n            transform={`translate(${mmToPx(pinPos.x)} ${mmToPx(pinPos.y)})`}\n          >\n            <Pin size={pinSize} />\n            <line\n              x1={mmToPx(linePos.x1)}\n              x2={mmToPx(linePos.x2)}\n              y1={mmToPx(linePos.y1)}\n              y2={mmToPx(linePos.y2)}\n              stroke=\"#cccccc\"\n            />\n            <PinFunctions\n              labelPosition={labelPosition}\n              height={mmToPx(pinSize.height)}\n              position={functionPos}\n              name={pin.name}\n              functions={pin.functions}\n            />\n          </g>\n        );\n      })}\n    </g>\n  );\n}\n\nPinRow.propTypes = {\n  orientation: PropTypes.oneOf(['vertical', 'horizontal']).isRequired,\n  labelPosition: PropTypes.oneOf(['left', 'right', 'top', 'bottom']).isRequired,\n  pins: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      position: PropTypes.number.isRequired\n    }).isRequired\n  ).isRequired,\n  pitch: PropTypes.number.isRequired,\n  position: PositionType.isRequired,\n  pinSize: SizeType.isRequired\n};\n","import PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { Row, Col } from 'react-bootstrap';\n\nimport Layout from 'components/Layout';\nimport PinRow from 'components/PinRow';\nimport { mmToPx } from 'utils/units';\nimport { centerPoint } from 'utils/translate';\n\nexport default function Board({ data }) {\n  const { image: bgImage, name, manufacturer, pinRows, size } = data.boardsJson;\n  const images = data.allFile.nodes;\n  const image = images.find((image) =>\n    image.relativePath.endsWith(bgImage.substring(bgImage.lastIndexOf('/') + 1))\n  ).publicURL;\n  const paddingTop = 20;\n  const paddingLeft = 200;\n  const [height, width] = [\n    mmToPx(size.height) * size.scale,\n    mmToPx(size.width) * size.scale\n  ];\n  const [containerHeight, containerWidth] = [\n    paddingTop * 2 + height,\n    paddingLeft * 2 + width\n  ];\n  const { y: offsetTop, x: offsetLeft } = centerPoint(\n    containerWidth,\n    containerHeight,\n    width,\n    height\n  );\n\n  return (\n    <Layout title={`${manufacturer} ${name}`}>\n      <h1>\n        {manufacturer} {name}\n      </h1>\n      <Row className=\"justify-content-center pp-board\">\n        <Col md={6}>\n          <svg\n            height={containerHeight}\n            width={containerWidth}\n            style={{\n              backgroundImage: `url(${image})`,\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: `${offsetLeft}px ${offsetTop}px`,\n              backgroundSize: `${width}px ${height}px`\n            }}\n          >\n            <g\n              transform={`translate(${offsetLeft} ${offsetTop}) scale(${size.scale} ${size.scale})`}\n            >\n              {pinRows.map((pinRow) => (\n                <PinRow key={pinRow.name} {...pinRow} pinSize={pinRow.size} />\n              ))}\n            </g>\n          </svg>\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nBoard.propTypes = {\n  data: PropTypes.object\n};\n\nexport const pageQuery = graphql`\n  query ($manufacturer: String!, $name: String!) {\n    allFile {\n      nodes {\n        publicURL\n        relativePath\n      }\n    }\n\n    boardsJson(manufacturer: { eq: $manufacturer }, name: { eq: $name }) {\n      color\n      image\n      manufacturer\n      name\n      pinRows {\n        name\n        orientation\n        labelPosition\n        position {\n          x\n          y\n        }\n        size {\n          height\n          width\n        }\n        pitch\n        pins {\n          functions\n          id\n          name\n          position\n        }\n      }\n      size {\n        height\n        width\n        scale\n      }\n    }\n  }\n`;\n","export const centerPoint = (x2, y2, x1, y1) => ({\n  x: (x2 - x1) / 2,\n  y: (y2 - y1) / 2\n});\n"],"names":["PositionType","PropTypes","x","y","SizeType","height","width","FunctionsType","pxToMm","pixels","ppi","window","devicePixelRatio","mmToPx","mm","useTextWidth","text","useMemo","document","fragment","createDocumentFragment","canvas","createElement","appendChild","getContext","measureText","Pin","size","fill","stroke","strokeWidth","propTypes","index","isRequired","PinFunction","color","textColor","name","transform","rx","font","fontSize","style","textAnchor","PinFunctions","functions","labelPosition","omitName","length","toLowerCase","nameWidth","nameX","offset","map","fn","i","functionName","toUpperCase","offsetIndex","getColorForFunction","PinRow","orientation","pins","pinSize","pitch","position","pin","pinPos","functionPos","linePos","x1","y1","x2","y2","id","Board","data","image","bgImage","manufacturer","pinRows","boardsJson","allFile","nodes","find","relativePath","endsWith","substring","lastIndexOf","publicURL","scale","containerHeight","containerWidth","paddingTop","paddingLeft","offsetTop","offsetLeft","Layout","title","Row","className","Col","md","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","pinRow"],"sourceRoot":""}